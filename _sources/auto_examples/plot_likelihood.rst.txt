
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_likelihood.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_likelihood.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_likelihood.py:


===========================
Likelihood functions
===========================

A set of likelihood functions used for estimation

.. GENERATED FROM PYTHON SOURCE LINES 11-67



.. image-sg:: /auto_examples/images/sphx_glr_plot_likelihood_001.png
   :alt: Force, Diffusion
   :srcset: /auto_examples/images/sphx_glr_plot_likelihood_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/folie/folie/folie/estimation/overdamped_transitionDensity.py:187: RuntimeWarning: invalid value encountered in divide
      temp = mu * (np.exp(mu_x * dt) - 1) / mu_x






|

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt

    import folie as fl

    # Trouver comment on rentre les donn√©es
    trj = np.loadtxt("datasets/example_2d.trj")
    data = fl.Trajectories(dt=trj[1, 0] - trj[0, 0])
    data.append(trj[:, 1:2])

    model = fl.models.BrownianMotion()

    fig, axs = plt.subplots(1, 2)
    axs[0].set_title("Force")
    axs[0].set_xlabel("$f$")
    axs[0].set_ylabel("$L(f,1.0)$")
    axs[0].grid()


    axs[1].set_title("Diffusion")
    axs[1].grid()
    axs[1].set_xlabel("$\\sigma$")
    axs[1].set_ylabel("$L(1.0,\\sigma)$")


    force_range = np.linspace(-1, 1, 25)
    diff_range = np.linspace(0.5, 2, 25)


    for name, transitioncls in zip(
        ["Euler", "Ozaki", "ShojiOzaki", "Elerian", "Kessler", "Drozdov"],
        [
            fl.EulerDensity,
            fl.OzakiDensity,
            fl.ShojiOzakiDensity,
            fl.ElerianDensity,
            fl.KesslerDensity,
            fl.DrozdovDensity,
        ],
    ):
        likelihood = transitioncls(model)
        likelihood.preprocess_traj(data[0])
        likelihood_vals_force = np.zeros_like(force_range)
        for n, f in enumerate(force_range):
            likelihood_vals_force[n] = likelihood(1.0, data[0], np.array([f, 1.0]))[0]
        axs[0].plot(force_range, likelihood_vals_force, label=name)
        likelihood_vals_diff = np.zeros_like(diff_range)
        for n, d in enumerate(diff_range):
            likelihood_vals_diff[n] = likelihood(1.0, data[0], np.array([1.0, d]))[0]

        axs[1].plot(diff_range, likelihood_vals_diff, label=name)

    axs[0].legend()
    axs[1].legend()
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.991 seconds)


.. _sphx_glr_download_auto_examples_plot_likelihood.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_likelihood.ipynb <plot_likelihood.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_likelihood.py <plot_likelihood.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
